<template>
  <div v-if="currentUser" class="row justify-center relative-position">
    <div style="width:80vw; max-width: 1200px">
      <div>
        <h1 class="text-center text-uppercase text-weight-bolder" style="width:80vw; max-width: 400px">{{ tema.title }}</h1>
      </div>
      <div class="row items-start justify-around">
        <q-list class="col-md-2 col-xs-10 q-pa-md">
          <div class="text-bold q-mb-md">{{ tema.lista }}:</div>
          <div v-for="(item, i) in listaServicosPage" :key="i">
            <q-item class="borda" clickable v-ripple @click="setForm(item)">
              <q-item-section>{{ item.data.title }}</q-item-section>
            </q-item>
          </div>
        </q-list>
        <div class="col-md-10 col-xs-10 q-gutter-md">
          <div class="row items-start q-gutter-md">
            <div>
              <q-img width="300px" height="300px" :src="form.data.img" @click="onPickPhoto" class="cursor-pointer">
                <template v-slot:error>
                  <div class="absolute-full flex flex-center bg-negative text-white">
                    Clique aqui para add a imagem
                  </div>
                </template>
              </q-img>
              <input
                ref="photoInput"
                debounce="500"
                type="file"
                @change="onPhotoURLPicked"
                name="photo"
                style="display: none;"
                accept="image/*"
              />
            </div>
            <div class="col-md-6 q-gutter-md">
              <div>
                <q-input outlined v-model="form.data.title" type="text" label="Título" />
              </div>
              <div>
                <q-input outlined v-model="form.data.subtitle" type="text" label="Subtítulo" />
              </div>
              <div>
                <q-input outlined v-model="form.data.link" type="text" label="link" hint="Exemplo: esse-e-o-meu-titulo" />
              </div>
            </div>
          </div>
          <div>
            <q-editor
              v-model="form.data.description"
              ref="editorRef"
              toolbar-text-color="white"
              toolbar-toggle-color="yellow-8"
              toolbar-bg="primary"
              :toolbar="[
                [
                  {
                    label: $q.lang.editor.align,
                    icon: $q.iconSet.editor.align,
                    fixedLabel: true,
                    list: 'only-icons',
                    options: ['left', 'center', 'right', 'justify']
                  },
                  {
                    label: $q.lang.editor.align,
                    icon: $q.iconSet.editor.align,
                    fixedLabel: true,
                    options: ['left', 'center', 'right', 'justify']
                  }
                ],
                ['bold', 'italic', 'strike', 'underline', 'subscript', 'superscript'],
                [
                  {
                    label: $q.lang.editor.formatting,
                    icon: $q.iconSet.editor.formatting,
                    list: 'no-icons',
                    options: ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'code'],
                  },
                  {
                    label: $q.lang.editor.defaultFont,
                    icon: $q.iconSet.editor.font,
                    fixedIcon: true,
                    list: 'no-icons',
                    options: [
                      'default_font',
                      'arial',
                      'arial_black',
                      'comic_sans',
                      'courier_new',
                      'impact',
                      'lucida_grande',
                      'times_new_roman',
                      'verdana'
                    ]
                  },
                  'removeFormat'
                ],
                ['quote', 'unordered', 'ordered', 'outdent', 'indent'],
              ]"
              :fonts="{
                arial: 'Arial',
                arial_black: 'Arial Black',
                comic_sans: 'Comic Sans MS',
                courier_new: 'Courier New',
                impact: 'Impact',
                lucida_grande: 'Lucida Grande',
                times_new_roman: 'Times New Roman',
                verdana: 'Verdana'
              }"
            >
            </q-editor>
          </div>
          <div class="row items-center justify-around">
            <div>
              <q-btn color="negative" :disable="!form.id" icon="delete_outline" label="Excluir" @click="onDelete()" />
            </div>
            <div>
              <q-btn color="accent" icon="cleaning_services" label="Limpar" @click="onReset()" />
            </div>
            <div>
              <q-btn color="primary" icon="done" :disable="!validarDados" :label="form.id ? 'Atualizar benefício':'Criar novo benefício'" @click="onSubmit()" />
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="q-py-xl"></div>
  </div>
</template>

<script setup>

import { ref, computed } from "vue"
import { useGlobalStore } from 'src/store/globalStore'
import { Dialog } from "quasar";

const global = useGlobalStore()

const photoInput = ref(null)
const tema = ref({
    title: 'Serviços',
    lista: 'Lista de serviços',
    link: 'servico'
  })

let currentUser = computed(() => global.currentUser)
let listaServicosPage = computed(() => global.listaServicosPage?.sort((a, b) => a.data.index - b.data.index))

let file = ref(null)

let form = ref({
  id: null,
  data: {
    title: null,
    subtitle: null,
    link: null,
    description: null,
    flip: false,
    img: './',
    index: null,
    invert: null,
  }
})

let validarDados = computed(() => {
  let isForm = form.value.data
  if(isForm?.title && isForm?.subtitle && isForm?.link && isForm?.description ) {
    return true
  } else {
    return false
  }
})

function setForm(item) {
  form.value = item
}

function onReset() {

  form.value = {
    id: null,
    data: {
      title: '',
      subtitle: '',
      link: '',
      description: '',
      img: './',
      index: null,
      invert: false,
      flip: false
    }
  }
}

async function onSubmit() {
  let index = listaServicosPage.value.indexOf(form.value)
  form.value.data.index = index+1
  if(form.value.id) {
    let val = {
      collection: tema.value.link,
      doc: form.value.data,
      id: form.value.id
    }
    await global.updateDocs(val)
    onReset()
  } else {
    let val = {
      collection: tema.value.link,
      doc: form.value.data
    }
    await global.saveDoc(val)
    onReset()
  }
}

function onPickPhoto() {
  if(form.value.id) {
    photoInput.value.click();
  }
}

function onPhotoURLPicked(event) {
  const files = event.target.files;
  const file = files[0];
  const id = form.value.id
  console.log('form', form)
  var value = {
    id: id,
    collection: tema.value.link,
    files: file,
  }

  const fileReader = new FileReader()
  fileReader.addEventListener('load', () => {
    const base64 = fileReader.result
    form.value.data.img = base64
  })
  fileReader.readAsDataURL(file)

  global.uploadPhotoURL(value)

}

async function onDelete() {
  Dialog.create({
    title: "Atenção!!!",
    message: "Tem certeza que deseja excluir esse item? Essa ação é irreversível",
    cancel: true,
    persistent: true
  })
  .onOk(async () => {
    let val = {
      collection: tema.value.link,
      id: form.value.id
    }
    await global.deleteDocs(val)
    onReset()
  })

}

</script>

<style>

</style>
